// <auto-generated />
using System;
using System.Text.Json;
using FitTeamAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitTeamAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitTeamAPI.Models.Comment.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentID"));

                    b.Property<string>("CommentDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CommentType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.HasKey("CommentID");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Course.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("timestamp with time zone");

                    b.Property<JsonDocument>("JsonCourse")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("CourseID");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Document.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentID"));

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DocumentID");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Event.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventID"));

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HostUUID")
                        .HasColumnType("integer");

                    b.HasKey("EventID");

                    b.HasIndex("HostUUID");

                    b.ToTable("events");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Norm.Norm", b =>
                {
                    b.Property<int>("NormID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NormID"));

                    b.Property<string>("NormDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NormID");

                    b.ToTable("norms");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Permission.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionID"));

                    b.Property<string>("PermissionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PermissionID");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleID");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_has_course", b =>
                {
                    b.Property<int>("RCoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RCoID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.HasKey("RCoID");

                    b.HasIndex("CourseID");

                    b.HasIndex("RoleID");

                    b.ToTable("roles_has_courses");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_has_doc", b =>
                {
                    b.Property<int>("RDID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RDID"));

                    b.Property<int>("DocumentID")
                        .HasColumnType("integer");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.HasKey("RDID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("RoleID");

                    b.ToTable("roles_has_docs");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_has_norm", b =>
                {
                    b.Property<int>("RNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RNID"));

                    b.Property<int>("NormID")
                        .HasColumnType("integer");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.HasKey("RNID");

                    b.HasIndex("NormID");

                    b.HasIndex("RoleID");

                    b.ToTable("roles_has_norms");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_has_perm", b =>
                {
                    b.Property<int>("RPID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RPID"));

                    b.Property<int>("PermissionID")
                        .HasColumnType("integer");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.HasKey("RPID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("RoleID");

                    b.ToTable("roles_has_perms");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_has_test", b =>
                {
                    b.Property<int>("RTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RTID"));

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.Property<int>("TestID")
                        .HasColumnType("integer");

                    b.HasKey("RTID");

                    b.HasIndex("RoleID");

                    b.HasIndex("TestID");

                    b.ToTable("roles_has_tests");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_on_event", b =>
                {
                    b.Property<int>("REID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("REID"));

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.HasKey("REID");

                    b.HasIndex("EventID");

                    b.HasIndex("RoleID");

                    b.ToTable("roles_on_events");
                });

            modelBuilder.Entity("FitTeamAPI.Models.SalePlan.SalePlan", b =>
                {
                    b.Property<int>("SalePlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalePlanID"));

                    b.Property<string>("SalePlanName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SalePlanID");

                    b.ToTable("salePlans");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision", b =>
                {
                    b.Property<int>("SubdivisionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubdivisionID"));

                    b.Property<string>("SubdivisionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubdivisionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubdivisionID");

                    b.ToTable("subdivisions");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_has_course", b =>
                {
                    b.Property<int>("SCoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SCoID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("SubdivisionID")
                        .HasColumnType("integer");

                    b.HasKey("SCoID");

                    b.HasIndex("CourseID");

                    b.HasIndex("SubdivisionID");

                    b.ToTable("subdivisions_has_courses");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_has_doc", b =>
                {
                    b.Property<int>("SDID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SDID"));

                    b.Property<int>("DocumentID")
                        .HasColumnType("integer");

                    b.Property<int>("SubdivisionID")
                        .HasColumnType("integer");

                    b.HasKey("SDID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("SubdivisionID");

                    b.ToTable("subdivisions_has_docs");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_has_norm", b =>
                {
                    b.Property<int>("SNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SNID"));

                    b.Property<int>("NormID")
                        .HasColumnType("integer");

                    b.Property<int?>("SubdivisionID")
                        .HasColumnType("integer");

                    b.Property<int>("SubdivisonID")
                        .HasColumnType("integer");

                    b.HasKey("SNID");

                    b.HasIndex("NormID");

                    b.HasIndex("SubdivisionID");

                    b.ToTable("subdivisions_has_norms");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_has_plan", b =>
                {
                    b.Property<int>("SPID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SPID"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsOld")
                        .HasColumnType("boolean");

                    b.Property<int>("SalePlanID")
                        .HasColumnType("integer");

                    b.Property<int>("SubdivisionID")
                        .HasColumnType("integer");

                    b.HasKey("SPID");

                    b.HasIndex("SalePlanID");

                    b.HasIndex("SubdivisionID");

                    b.ToTable("subdivisions_has_plans");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_has_test", b =>
                {
                    b.Property<int>("STID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("STID"));

                    b.Property<int>("SubdivisionID")
                        .HasColumnType("integer");

                    b.Property<int>("TestID")
                        .HasColumnType("integer");

                    b.HasKey("STID");

                    b.HasIndex("SubdivisionID");

                    b.HasIndex("TestID");

                    b.ToTable("subdivisions_has_tests");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_on_event", b =>
                {
                    b.Property<int>("SEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SEID"));

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<int>("SubdivisionID")
                        .HasColumnType("integer");

                    b.HasKey("SEID");

                    b.HasIndex("EventID");

                    b.HasIndex("SubdivisionID");

                    b.ToTable("subdivisions_on_events");
                });

            modelBuilder.Entity("FitTeamAPI.Models.TestNQuestions.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionID"));

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.HasKey("QuestionID");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("FitTeamAPI.Models.TestNQuestions.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestID"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TestDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isCertification")
                        .HasColumnType("boolean");

                    b.HasKey("TestID");

                    b.ToTable("tests");
                });

            modelBuilder.Entity("FitTeamAPI.Models.TestNQuestions.Test_has_question", b =>
                {
                    b.Property<int>("TQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TQID"));

                    b.Property<int>("QuestionID")
                        .HasColumnType("integer");

                    b.Property<int>("TestID")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("TQID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("TestID");

                    b.ToTable("tests_has_questions");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker", b =>
                {
                    b.Property<int>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UUID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UUID");

                    b.ToTable("workers");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_complete_course", b =>
                {
                    b.Property<int>("WCoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WCoID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DoneTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkerID")
                        .HasColumnType("integer");

                    b.HasKey("WCoID");

                    b.HasIndex("CourseID");

                    b.HasIndex("WorkerID");

                    b.ToTable("workers_courses");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_did_test", b =>
                {
                    b.Property<int>("WTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WTID"));

                    b.Property<DateTime>("Begin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TestID")
                        .HasColumnType("integer");

                    b.Property<int>("WorkerID")
                        .HasColumnType("integer");

                    b.HasKey("WTID");

                    b.HasIndex("TestID");

                    b.HasIndex("WorkerID");

                    b.ToTable("workers_did_tests");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_does_norm", b =>
                {
                    b.Property<int>("WNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WNID"));

                    b.Property<int>("HostID")
                        .HasColumnType("integer");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NormID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NormTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkerID")
                        .HasColumnType("integer");

                    b.HasKey("WNID");

                    b.HasIndex("HostID");

                    b.HasIndex("NormID");

                    b.HasIndex("WorkerID");

                    b.ToTable("workers_does_norms");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_has_comment", b =>
                {
                    b.Property<int>("WCID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WCID"));

                    b.Property<int>("CommentID")
                        .HasColumnType("integer");

                    b.Property<int>("FromID")
                        .HasColumnType("integer");

                    b.Property<int>("ToID")
                        .HasColumnType("integer");

                    b.HasKey("WCID");

                    b.HasIndex("CommentID");

                    b.HasIndex("FromID");

                    b.HasIndex("ToID");

                    b.ToTable("workers_has_comments");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_has_role", b =>
                {
                    b.Property<int>("WRID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WRID"));

                    b.Property<int?>("RoleID")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkerUUID")
                        .HasColumnType("integer");

                    b.HasKey("WRID");

                    b.HasIndex("RoleID");

                    b.HasIndex("WorkerUUID");

                    b.ToTable("workers_has_Roles");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_know_doc", b =>
                {
                    b.Property<int>("WDID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WDID"));

                    b.Property<int>("DocumentID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("KnowledgeTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkerID")
                        .HasColumnType("integer");

                    b.HasKey("WDID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("WorkerID");

                    b.ToTable("workers_know_docs");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_on_event", b =>
                {
                    b.Property<int>("WEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WEID"));

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<int>("WorkerID")
                        .HasColumnType("integer");

                    b.HasKey("WEID");

                    b.HasIndex("EventID");

                    b.HasIndex("WorkerID");

                    b.ToTable("workers_on_events");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Event.Event", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Worker.Worker", "Host")
                        .WithMany()
                        .HasForeignKey("HostUUID");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_has_course", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Role.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_has_doc", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Document.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Role.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_has_norm", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Norm.Norm", "Norm")
                        .WithMany()
                        .HasForeignKey("NormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Role.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Norm");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_has_perm", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Permission.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Role.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_has_test", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Role.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.TestNQuestions.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Role.Role_on_event", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Event.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Role.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_has_course", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Subdivision.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_has_doc", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Document.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Subdivision.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_has_norm", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Norm.Norm", "Norm")
                        .WithMany()
                        .HasForeignKey("NormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Subdivision.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionID");

                    b.Navigation("Norm");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_has_plan", b =>
                {
                    b.HasOne("FitTeamAPI.Models.SalePlan.SalePlan", "SalePlan")
                        .WithMany()
                        .HasForeignKey("SalePlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Subdivision.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalePlan");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_has_test", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Subdivision.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.TestNQuestions.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subdivision");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Subdivision.Subdivision_on_event", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Event.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Subdivision.Subdivision", "Subdivision")
                        .WithMany()
                        .HasForeignKey("SubdivisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("FitTeamAPI.Models.TestNQuestions.Test_has_question", b =>
                {
                    b.HasOne("FitTeamAPI.Models.TestNQuestions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.TestNQuestions.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_complete_course", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Worker.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_did_test", b =>
                {
                    b.HasOne("FitTeamAPI.Models.TestNQuestions.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Worker.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_does_norm", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Worker.Worker", "Host")
                        .WithMany()
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Norm.Norm", "Norm")
                        .WithMany()
                        .HasForeignKey("NormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Worker.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Norm");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_has_comment", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Comment.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Worker.Worker", "From")
                        .WithMany()
                        .HasForeignKey("FromID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Worker.Worker", "To")
                        .WithMany()
                        .HasForeignKey("ToID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_has_role", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Role.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("FitTeamAPI.Models.Worker.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerUUID");

                    b.Navigation("Role");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_know_doc", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Document.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Worker.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("FitTeamAPI.Models.Worker.Worker_on_event", b =>
                {
                    b.HasOne("FitTeamAPI.Models.Event.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitTeamAPI.Models.Worker.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Worker");
                });
#pragma warning restore 612, 618
        }
    }
}
